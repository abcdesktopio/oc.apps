# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  generateInputDockerFile:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: "18.x"
      - name: Install dependencies
        run: npm install   
      - name: generate Dockerfile
        run: node make.js -r '3.0'
      - name: Generate matrix with all Dockerfiles of the repository
        id: set-matrix
        run: |
          dockerfiles=$(ls -l *.d | grep '^-' | awk -F ' ' '{print $9}' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "dockerfiles=$dockerfiles"
          echo "::set-output name=matrix::$dockerfiles"
      
  build:
    needs: generateInputDockerFile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.generateInputDockerFile.outputs.matrix) }}
    steps:
    
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
         
      - name: Use Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: "18.x"

      - name: Install dependencies
        run: npm install 
        
      - name: generate Dockerfile
        run: |
          node make.js -r '3.0'
         
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
 
      - name: Login to DockerHub
        uses: docker/login-action@v2 
        with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_TOKEN }}
     
      - name: Dump ${{ matrix.path }}
        env: 
          image: ${{ matrix.path }}
          # imagetag: ${{ github.head_ref || github.ref_name || 'dev' }}
          imagetag: 'dev'
        run: |
          echo "Dockerfile=${{ matrix.path }}" 
          echo "abcdesktopio/${{ env.image }}:${{ env.imagetag }}"
            
      - name: Build and push ${{ matrix.path }}
        env: 
          image: ${{ matrix.path }}
          imagetag: ${{ github.head_ref || github.ref_name || 'dev' }}
        uses: docker/build-push-action@v3
        with:
          file: ${{ env.image }}
          context: .
          platforms: linux/amd64,linux/arm64
          build-args: |
            TAG=dev
          push: true
          tags: |
            abcdesktopio/${{ env.image }}:${{ env.imagetag }}
            
      - name: Docker inspect
        env: 
          image: ${{ matrix.path }}
          imagetag: ${{ github.head_ref || github.ref_name || 'dev' }}
        run: |
          docker pull docker.io/abcdesktopio/${{ env.image }}:${{ env.imagetag }} 
          docker image inspect docker.io/abcdesktopio/${{ env.image }}:${{ env.imagetag }} > ${{ env.image }}.${{ env.imagetag }}.json
          cat ${{ env.image }}.${{ env.imagetag }}.json
          
      - uses: actions/checkout@v3
        with:
          repository: 'abcdesktopio/images'
          ref: ${{ github.ref_name }}
          path: images
          
      - name: commit image 
        env:
          image: ${{ matrix.path }}
          imagetag: ${{ github.head_ref || github.ref_name || 'dev' }}
        run: |
          cp {{ env.image }}.json  ${{ env.image }}.${{ env.imagetag }}.json images
          cd images
          echo "imagemd=$(echo {{ env.image }} | rev | cut -c3- | rev)" >> $GITHUB_ENV
          echo ${{ env.image }} ${{ env.image }}.${{ env.imagetag }}.json
          git add ${{ env.image }} ${{ env.image }}.${{ env.imagetag }}.json
          git commit -m "generated file" ${{ env.image }} ${{ env.image }}.${{ env.imagetag }}.json
          git push
          
      - name: dump env
        run: |
           echo $imagemd
          


